// Generated by rstantools.  Do not edit by hand.

/*
    leafcutter is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    leafcutter is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with leafcutter.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_dm_glm_mc_psi_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_dm_glm_mc_psi");
    reader.add_event(38, 36, "end", "model_dm_glm_mc_psi");
    return reader;
}
#include <stan_meta_header.hpp>
class model_dm_glm_mc_psi : public prob_grad {
private:
        int N;
        int P;
        int K;
        std::vector<vector_d> x;
        std::vector<vector_d> y;
        matrix_d beta;
        std::vector<double> conc;
        double residual_sigma;
public:
    model_dm_glm_mc_psi(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_dm_glm_mc_psi(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_dm_glm_mc_psi_namespace::model_dm_glm_mc_psi";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 0);
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "P", "int", context__.to_vec());
            P = int(0);
            vals_i__ = context__.vals_i("P");
            pos__ = 0;
            P = vals_i__[pos__++];
            check_greater_or_equal(function__, "P", P, 0);
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            check_greater_or_equal(function__, "K", K, 0);
            current_statement_begin__ = 5;
            validate_non_negative_index("x", "P", P);
            validate_non_negative_index("x", "N", N);
            context__.validate_dims("data initialization", "x", "vector_d", context__.to_vec(N,P));
            x = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(N, Eigen::Matrix<double, Eigen::Dynamic, 1>(P));
            vals_r__ = context__.vals_r("x");
            pos__ = 0;
            size_t x_j_1_max__ = P;
            size_t x_k_0_max__ = N;
            for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < x_k_0_max__; ++k_0__) {
                    x[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 6;
            validate_non_negative_index("y", "K", K);
            validate_non_negative_index("y", "N", N);
            context__.validate_dims("data initialization", "y", "vector_d", context__.to_vec(N,K));
            y = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(N, Eigen::Matrix<double, Eigen::Dynamic, 1>(K));
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_j_1_max__ = K;
            size_t y_k_0_max__ = N;
            for (size_t j_1__ = 0; j_1__ < y_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
                    y[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 7;
            validate_non_negative_index("beta", "K", K);
            validate_non_negative_index("beta", "P", P);
            context__.validate_dims("data initialization", "beta", "matrix_d", context__.to_vec(K,P));
            beta = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(K, P);
            vals_r__ = context__.vals_r("beta");
            pos__ = 0;
            size_t beta_j_2_max__ = P;
            size_t beta_j_1_max__ = K;
            for (size_t j_2__ = 0; j_2__ < beta_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                    beta(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 8;
            validate_non_negative_index("conc", "K", K);
            context__.validate_dims("data initialization", "conc", "double", context__.to_vec(K));
            conc = std::vector<double>(K, double(0));
            vals_r__ = context__.vals_r("conc");
            pos__ = 0;
            size_t conc_k_0_max__ = K;
            for (size_t k_0__ = 0; k_0__ < conc_k_0_max__; ++k_0__) {
                conc[k_0__] = vals_r__[pos__++];
            }
            size_t conc_i_0_max__ = K;
            for (size_t i_0__ = 0; i_0__ < conc_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "conc[i_0__]", conc[i_0__], 0);
            }
            current_statement_begin__ = 9;
            context__.validate_dims("data initialization", "residual_sigma", "double", context__.to_vec());
            residual_sigma = double(0);
            vals_r__ = context__.vals_r("residual_sigma");
            pos__ = 0;
            residual_sigma = vals_r__[pos__++];
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 12;
            validate_non_negative_index("residual", "K", K);
            validate_non_negative_index("residual", "N", N);
            num_params_r__ += (K * N);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_dm_glm_mc_psi() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 12;
        if (!(context__.contains_r("residual")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable residual missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("residual");
        pos__ = 0U;
        validate_non_negative_index("residual", "K", K);
        validate_non_negative_index("residual", "N", N);
        context__.validate_dims("parameter initialization", "residual", "vector_d", context__.to_vec(N,K));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > residual(N, Eigen::Matrix<double, Eigen::Dynamic, 1>(K));
        size_t residual_j_1_max__ = K;
        size_t residual_k_0_max__ = N;
        for (size_t j_1__ = 0; j_1__ < residual_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < residual_k_0_max__; ++k_0__) {
                residual[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t residual_i_0_max__ = N;
        for (size_t i_0__ = 0; i_0__ < residual_i_0_max__; ++i_0__) {
            try {
                writer__.vector_unconstrain(residual[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable residual: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 12;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > residual;
            size_t residual_d_0_max__ = N;
            residual.reserve(residual_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < residual_d_0_max__; ++d_0__) {
                if (jacobian__)
                    residual.push_back(in__.vector_constrain(K, lp__));
                else
                    residual.push_back(in__.vector_constrain(K));
            }
            // model body
            current_statement_begin__ = 15;
            for (int n = 1; n <= N; ++n) {
                {
                current_statement_begin__ = 16;
                validate_non_negative_index("a", "K", K);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> a(K);
                stan::math::initialize(a, DUMMY_VAR__);
                stan::math::fill(a, DUMMY_VAR__);
                current_statement_begin__ = 17;
                local_scalar_t__ suma(DUMMY_VAR__);
                (void) suma;  // dummy to suppress unused var warning
                stan::math::initialize(suma, DUMMY_VAR__);
                stan::math::fill(suma, DUMMY_VAR__);
                current_statement_begin__ = 18;
                validate_non_negative_index("aPlusY", "K", K);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> aPlusY(K);
                stan::math::initialize(aPlusY, DUMMY_VAR__);
                stan::math::fill(aPlusY, DUMMY_VAR__);
                current_statement_begin__ = 19;
                validate_non_negative_index("lGaPlusY", "K", K);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lGaPlusY(K);
                stan::math::initialize(lGaPlusY, DUMMY_VAR__);
                stan::math::fill(lGaPlusY, DUMMY_VAR__);
                current_statement_begin__ = 20;
                validate_non_negative_index("lGaA", "K", K);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lGaA(K);
                stan::math::initialize(lGaA, DUMMY_VAR__);
                stan::math::fill(lGaA, DUMMY_VAR__);
                current_statement_begin__ = 21;
                validate_non_negative_index("s", "K", K);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> s(K);
                stan::math::initialize(s, DUMMY_VAR__);
                stan::math::fill(s, DUMMY_VAR__);
                current_statement_begin__ = 22;
                lp_accum__.add(normal_log<propto__>(get_base1(residual, n, "residual", 1), 0, residual_sigma));
                current_statement_begin__ = 23;
                stan::math::assign(s, softmax(add(multiply(beta, get_base1(x, n, "x", 1)), get_base1(residual, n, "residual", 1))));
                current_statement_begin__ = 24;
                for (int k = 1; k <= K; ++k) {
                    current_statement_begin__ = 25;
                    stan::model::assign(a, 
                                stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                                (get_base1(conc, k, "conc", 1) * get_base1(s, k, "s", 1)), 
                                "assigning variable a");
                }
                current_statement_begin__ = 28;
                stan::math::assign(suma, sum(a));
                current_statement_begin__ = 29;
                stan::math::assign(aPlusY, add(a, get_base1(y, n, "y", 1)));
                current_statement_begin__ = 30;
                for (int k = 1; k <= K; ++k) {
                    current_statement_begin__ = 31;
                    stan::model::assign(lGaPlusY, 
                                stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                                stan::math::lgamma(get_base1(aPlusY, k, "aPlusY", 1)), 
                                "assigning variable lGaPlusY");
                    current_statement_begin__ = 32;
                    stan::model::assign(lGaA, 
                                stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                                stan::math::lgamma(get_base1(a, k, "a", 1)), 
                                "assigning variable lGaA");
                }
                current_statement_begin__ = 34;
                lp_accum__.add((((stan::math::lgamma(suma) + sum(lGaPlusY)) - stan::math::lgamma((suma + sum(get_base1(y, n, "y", 1))))) - sum(lGaA)));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("residual");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(K);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_dm_glm_mc_psi_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > residual;
        size_t residual_d_0_max__ = N;
        residual.reserve(residual_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < residual_d_0_max__; ++d_0__) {
            residual.push_back(in__.vector_constrain(K));
        }
        size_t residual_j_1_max__ = K;
        size_t residual_k_0_max__ = N;
        for (size_t j_1__ = 0; j_1__ < residual_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < residual_k_0_max__; ++k_0__) {
                vars__.push_back(residual[k_0__](j_1__));
            }
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_dm_glm_mc_psi";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t residual_j_1_max__ = K;
        size_t residual_k_0_max__ = N;
        for (size_t j_1__ = 0; j_1__ < residual_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < residual_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "residual" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t residual_j_1_max__ = K;
        size_t residual_k_0_max__ = N;
        for (size_t j_1__ = 0; j_1__ < residual_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < residual_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "residual" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_dm_glm_mc_psi_namespace::model_dm_glm_mc_psi stan_model;
#endif
